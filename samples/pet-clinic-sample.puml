@startuml Component diagram for Spring PetClinic - Web Application
!include https://raw.githubusercontent.com/robbell/plantuml-c4/v1.0/c4.puml

Person("Clinic employee", "An employee of the clinic") as clinicEmployee

Boundary("Web Application", "Container"){
    Component("VetController", "", "Spring MVC Controller") as vetController
    Component("VisitController", "", "Spring MVC Controller") as visitController
    Component("PetController", "", "Spring MVC Controller") as petController
    Component("VisitController", "", "Spring MVC Controller") as ownerController
    Component("VisitController", "Controller used to showcase what happens when an exception is thrown", "Spring MVC Controller") as crashController

    ' Inline colouring
    Component("ClinicService", "Mostly used as a facade so all controllers have a single entry point", "Spring Service") as clinicService #095166

    Component("VetRepository", "Repository class for domain objects. All method names are compliant with Sprin Data conventions", "Spring MVC Controller") as vetRepository
    Component("VisitRepository", "Repository class for domain objects. All method names are compliant with Sprin Data conventions", "Spring MVC Controller") as visitRepository
    Component("PetRepository", "Repository class for domain objects. All method names are compliant with Sprin Data conventions", "Spring MVC Controller") as petRepository
    Component("VisitRepository", "Repository class for domain objects. All method names are compliant with Sprin Data conventions", "Spring MVC Controller") as ownerRepository
}

Database("A database", "Stores information regarding the veterinarians, the clients and their pets", "Relational database schema") as database

clinicEmployee ..> vetController : Uses Tech("HTTP")
clinicEmployee ..> visitController : Uses Tech("HTTP")
clinicEmployee ..> petController : Uses Tech("HTTP")
clinicEmployee ..> ownerController : Uses Tech("HTTP")
clinicEmployee ..> crashController : Uses Tech("HTTP")

vetController ..> clinicService
visitController ..> clinicService
petController ..> clinicService
ownerController ..> clinicService
crashController ..> clinicService

clinicService ..> vetRepository
clinicService ..> visitRepository
clinicService ..> petRepository
clinicService ..> ownerRepository

vetRepository ..> database : Reads from and writes to Tech("jDBC")
visitRepository ..> database : Reads from and writes to Tech("jDBC")
petRepository ..> database : Reads from and writes to Tech("jDBC")
ownerRepository ..> database : Reads from and writes to Tech("jDBC")
@enduml